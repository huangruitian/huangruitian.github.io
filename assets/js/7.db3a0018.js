(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{308:function(t,s,a){t.exports=a.p+"assets/img/xuanran.c5a6d8b4.jpg"},358:function(t,s,a){t.exports=a.p+"assets/img/bs.b61cab52.png"},359:function(t,s,a){t.exports=a.p+"assets/img/http_request.1b49976a.png"},360:function(t,s,a){t.exports=a.p+"assets/img/url.92d73c75.png"},361:function(t,s,a){t.exports=a.p+"assets/img/chongpai.f4cbf047.jpg"},362:function(t,s,a){t.exports=a.p+"assets/img/chonghui.5ce1496b.jpg"},363:function(t,s,a){t.exports=a.p+"assets/img/eventLop.3c578ce6.png"},364:function(t,s,a){t.exports=a.p+"assets/img/chuangtongRSA.ff2ef76e.png"},459:function(t,s,a){"use strict";a.r(s);var r=a(42),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"浏览器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),r("h2",{attrs:{id:"单进程浏览器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单进程浏览器"}},[t._v("#")]),t._v(" 单进程浏览器")]),t._v(" "),r("p",[t._v("网络、插件、JavaScript 运行环境、渲染引擎和页面等都在一个进程。在 2007 年之前，市面上浏览器都是单进程的。")]),t._v(" "),r("h2",{attrs:{id:"现代浏览器架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#现代浏览器架构"}},[t._v("#")]),t._v(" 现代浏览器架构")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("浏览器进程（主进程）：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")])]),t._v(" "),r("li",[r("p",[t._v("渲染进程：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),t._v(" "),r("li",[r("p",[t._v("GPU 进程：其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")])]),t._v(" "),r("li",[r("p",[t._v("网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")])]),t._v(" "),r("li",[r("p",[t._v("插件进程：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])])]),t._v(" "),r("p",[r("img",{attrs:{src:a(358),alt:"alt"}})]),t._v(" "),r("p",[t._v('通常情况下是一个页面使用一个进程，但是，有一种情况，叫"同一站点(same-site)"，具体地讲，我们将“同一站点”定义为根域名（例如，geekbang.org）加上协议（例如，https:// 或者http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：')]),t._v(" "),r("ul",[r("li",[t._v("https://time.geekbang.org")]),t._v(" "),r("li",[t._v("https://www.geekbang.org")]),t._v(" "),r("li",[t._v("https://www.geekbang.org:8080")])]),t._v(" "),r("p",[t._v("都是属于同一站点，因为它们的协议都是https，而根域名也都是geekbang.org。你也许了解同源策略，但是同一站点和同源策略还是存在一些不同地方，在这里你需要了解它们不是同一件事就行了。")]),t._v(" "),r("p",[t._v("Chrome的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫process-per-site-instance。")]),t._v(" "),r("p",[t._v("直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。")]),t._v(" "),r("p",[t._v("所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。")]),t._v(" "),r("p",[t._v("为什么要让他们跑在一个进程里面呢？")]),t._v(" "),r("p",[t._v("因为在一个渲染进程里面，他们就会共享JS的执行环境，也就是说A页面可以直接在B页面中执行脚本。因为是同一家的站点，所以是有这个需求的。")]),t._v(" "),r("h2",{attrs:{id:"浏览器端发起-http-请求流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端发起-http-请求流程"}},[t._v("#")]),t._v(" 浏览器端发起 HTTP 请求流程")]),t._v(" "),r("ol",[r("li",[t._v("构建请求")])]),t._v(" "),r("p",[t._v("首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("index"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html "),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP1")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("ol",{attrs:{start:"2"}},[r("li",[t._v("查找缓存(重点)")])]),t._v(" "),r("p",[t._v("在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。\n其中，浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术(命中副本直接使用)。")]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("准备IP地址和端口号")])]),t._v(" "),r("p",[t._v("浏览器会请求 DNS 返回域名对应的 IP。当然浏览器还提供了 DNS 数据缓存服务。命中缓存直接返回。HTTP默认端口号是80，HTTPS是443。")]),t._v(" "),r("ol",{attrs:{start:"4"}},[r("li",[t._v("等待 TCP 队列")])]),t._v(" "),r("p",[t._v("Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有（并发） 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。")]),t._v(" "),r("ol",{attrs:{start:"5"}},[r("li",[t._v("建立 TCP 连接")])]),t._v(" "),r("p",[t._v("三次握手建立连接")]),t._v(" "),r("ol",{attrs:{start:"6"}},[r("li",[t._v("发送 HTTP 请求\n一旦建立了 TCP 连接，浏览器就可以和服务器进行通信了。而 HTTP 中的数据正是在这个通信过程中传输的。")])]),t._v(" "),r("p",[t._v("首先浏览器会向服务器发送请求行，它包括了请求方法、请求 URI（Uniform Resource Identifier）和 HTTP 版本协议。")]),t._v(" "),r("p",[t._v("在浏览器发送请求行命令之后，还要以请求头形式发送其他一些信息，把浏览器的一些基础信息告诉服务器。比如包含了浏览器所使用的操作系统、浏览器内核等信息，以及当前请求的域名信息、浏览器端的 Cookie 信息，等等。")]),t._v(" "),r("ol",{attrs:{start:"7"}},[r("li",[t._v("服务器端处理 HTTP 请求流程")])]),t._v(" "),r("p",[t._v("一旦服务器处理结束，便可以返回数据给浏览器了")]),t._v(" "),r("p",[t._v("首先服务器会返回响应行，包括协议版本和状态码。")]),t._v(" "),r("p",[t._v("但并不是所有的请求都可以被服务器处理的，一些无法处理或者处理出错的信息就返回相应的状态码。")]),t._v(" "),r("p",[t._v("随后，正如浏览器会随同请求发送请求头一样，服务器也会随同响应向浏览器发送响应头。")]),t._v(" "),r("p",[t._v("发送完响应头后，服务器就可以继续发送响应体的数据，通常，响应体就包含了 HTML 的实际内容。")]),t._v(" "),r("ol",{attrs:{start:"8"}},[r("li",[t._v("断开连接")])]),t._v(" "),r("p",[t._v("通常情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接。\n不过如果浏览器或者服务器在其头信息中加入了"),r("code",[t._v("Connection:Keep-Alive")]),t._v("字段，保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。HTTP/1.1就默认开启了该字段。")]),t._v(" "),r("ol",{attrs:{start:"9"}},[r("li",[t._v("似乎请求流程要结束了，但是一般有些网站会进行重定向。重定向一般配合响应头的 Location 字段。")])]),t._v(" "),r("p",[t._v("来看一下整个流程图吧：\n"),r("img",{attrs:{src:a(359),alt:"alt"}})]),t._v(" "),r("h2",{attrs:{id:"在浏览器里-从输入-url-到页面展示-这中间发生了什么"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在浏览器里-从输入-url-到页面展示-这中间发生了什么"}},[t._v("#")]),t._v(" 在浏览器里，从输入 URL 到页面展示，这中间发生了什么？")]),t._v(" "),r("p",[t._v("这是一道非常经典的面试题，能比较全面地考察应聘者知识的掌握程度，其中涉及到了网络、操作系统、Web 等一系列的知识。下面是一个完整的流程。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(360),alt:"alt"}})]),t._v(" "),r("ol",[r("li",[t._v("用户输入关键词，地址栏判断是搜索内容还是url地址。")])]),t._v(" "),r("ul",[r("li",[t._v("如果是搜索内容，会使用浏览器默认搜索引擎加上搜索内容合成url；")]),t._v(" "),r("li",[t._v("如果是域名会加上协议（如https）合成完整的url。")])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[r("p",[t._v("浏览器进程通过IPC（进程间通信）把url传给网络进程（网络进程接收到url才发起真正的网络请求）。")])]),t._v(" "),r("li",[r("p",[t._v("网络进程接收到url后，查找有没有缓存。")])])]),t._v(" "),r("ul",[r("li",[t._v("有缓存，直接返回缓存的资源。")]),t._v(" "),r("li",[t._v("没有缓存，进入网络请求，请求前会先解析域名对应的DNS")])]),t._v(" "),r("ol",{attrs:{start:"4"}},[r("li",[r("p",[t._v("利用IP地址和服务器建立TCP连接（3次握手）。")])]),t._v(" "),r("li",[r("p",[t._v("建立连接后，浏览器构建数据包（包含请求行，请求头，请求正文，并把该域名相关Cookie等数据附加到请求头），然后向服务器发送请求。")])]),t._v(" "),r("li",[r("p",[t._v("服务器接收到消息后根据请求信息构建响应数据（包括响应行，响应头，响应正文），然后发送回网络进程。")])]),t._v(" "),r("li",[r("p",[t._v("网络进程接收到响应数据后进行解析。")])])]),t._v(" "),r("ul",[r("li",[t._v("如果发现响应行的返回的状态码为301，302，根据Location字段进行重定向。")]),t._v(" "),r("li",[t._v("如果返回的状态码为200，说明服务器返回了数据。")])]),t._v(" "),r("ol",{attrs:{start:"8"}},[r("li",[t._v("根据 Content-Type 进行内容处理")])]),t._v(" "),r("ul",[r("li",[t._v("如果是下载类型(application/octet-stream 等)，则该请求会被提交给浏览器的下载管理器，同时该请求的流程到此结束。")]),t._v(" "),r("li",[t._v("如果是网页类型(text/html)，那么浏览器就要准备渲染页面了。")])]),t._v(" "),r("ol",{attrs:{start:"9"}},[r("li",[t._v("渲染页面开始。")])]),t._v(" "),r("ul",[r("li",[t._v("浏览器进程发出“提交文档”（文档是响应体数据）消息给渲染进程，渲染进程接收到消息后会和网络进程建立传输数据的通道，网络进程将“文档”传输给渲染进程。")])]),t._v(" "),r("ol",{attrs:{start:"10"}},[r("li",[r("p",[t._v("一旦开始传输，渲染进程便开始渲染界面（详细渲染过程待展开）")])]),t._v(" "),r("li",[r("p",[t._v("传输完毕，渲染进程会发出“确认提交”消息给浏览器进程。")])]),t._v(" "),r("li",[r("p",[t._v("浏览器在接收到“确认提交”消息后，更新浏览器界面状态（包括地址栏信息，仟前进后退历史，web页面和网站安全状态）。")])]),t._v(" "),r("li",[r("p",[t._v("页面此时可能还没有渲染完毕，而一旦渲染完毕，渲染进程会发送一个消息给浏览器进程，浏览器接收到这个消息后会停止标签图标的加载动画。")])])]),t._v(" "),r("h2",{attrs:{id:"浏览器缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),r("p",[t._v("要说清楚浏览器缓存，得从三个部分来说：")]),t._v(" "),r("ol",[r("li",[t._v("强缓存")])]),t._v(" "),r("ul",[r("li",[t._v("不需要发送http请求； Cache-Control 的优先级比 Expires 高；")]),t._v(" "),r("li",[t._v("Expires，http/1.0字段，服务器的时间可能和浏览器的时间不一致，也就是说并不准确，有坑；")]),t._v(" "),r("li",[t._v("Cache-Control，http/1.1字段，"),r("code",[t._v("Cache-Control:max-age=3600")]),t._v("，缓存在3600秒内都有效；\n"),r("ul",[r("li",[t._v("public: 客户端和代理服务器都可以缓存。")]),t._v(" "),r("li",[t._v("private： 这种情况就是只有浏览器能缓存了，中间的代理服务器不能缓存。")]),t._v(" "),r("li",[t._v("no-cache: 跳过当前的强缓存，发送HTTP请求，即直接进入协商缓存阶段。")]),t._v(" "),r("li",[t._v("no-store：非常粗暴，不进行任何形式的缓存。")]),t._v(" "),r("li",[t._v("s-maxage：这和max-age长得比较像，但是区别在于s-maxage是针对代理服务器的缓存时间。")]),t._v(" "),r("li",[t._v("must-revalidate: 是缓存就会有过期的时候，加上这个字段一旦缓存过期，就必须回到源服务器证。")])])])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("协商缓存")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("强缓存失效之后，浏览器在请求头中携带相应的缓存tag来向服务器发请求，由服务器根据这个tag，来决定是否使用缓存，这就是协商缓存")])]),t._v(" "),r("li",[r("p",[t._v("具体来说，这样的缓存tag分为两种: Last-Modified 和 ETag。这两者各有优劣，并不存在谁对谁有绝对的优势，跟上面强缓存的两个 tag 不一样。")])]),t._v(" "),r("li",[r("p",[t._v("Last-Modified 即最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。")]),t._v(" "),r("ul",[r("li",[t._v("浏览器接收到后，如果再次请求，会在请求头中携带If-Modified-Since字段，这个字段的值也就是服务器传来的最后修改时间。")]),t._v(" "),r("li",[t._v("服务器拿到请求头中的If-Modified-Since的字段后，其实会和这个服务器中该资源的最后修改时间对比。")]),t._v(" "),r("li",[t._v("如果请求头的If-Modified-Since比最后修改时间小，说明更新了，按照常规HTTP流程返回，不然304")])])]),t._v(" "),r("li",[r("p",[t._v("ETag 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。服务器通过响应头把这个值给浏览器。")]),t._v(" "),r("ul",[r("li",[t._v("浏览器接收到ETag的值，会在下次请求时，将这个值作为If-None-Match这个字段的内容，并放到请求头中，然后发给服务器")]),t._v(" "),r("li",[t._v("服务器接收到If-None-Match后，会跟服务器上该资源的ETag进行比对。")]),t._v(" "),r("li",[t._v("两者不一样，说明更新了，否则返回304；")])])]),t._v(" "),r("li",[r("p",[t._v("在准确度上，ETag要比 Last-Modified 更准确，后者是秒级的单位；")])]),t._v(" "),r("li",[r("p",[t._v("在效率上，Last-Modified 显然要更有优势；")])])]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("缓存位置\n浏览器中的缓存位置一共有四种，按优先级从高到低排列分别是：")])]),t._v(" "),r("ul",[r("li",[t._v("Service Worker 借鉴了 Web Worker的 思路，即让 JS 运行在主线程之外，由于它脱离了浏览器的窗体，因此无法直接访问DOM。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如离线缓存、消息推送和网络代理等功能。其中的离线缓存就是 Service Worker Cache。")])]),t._v(" "),r("p",[t._v("Service Worker 同时也是 PWA 的重要实现机制，关于它的细节和特性，我们将会在后面的 PWA 的分享中详细介绍。")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Memory Cache 指的是内存缓存，从效率上讲它是最快的。但是从存活时间来讲又是最短的，当渲染进程结束后，内存缓存也就不存在了。")])]),t._v(" "),r("li",[r("p",[t._v("Disk Cache 就是存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，但是他的优势在于存储容量和存储时长。稍微有些计算机基础的应该很好理解，就不展开了。")])]),t._v(" "),r("li",[r("p",[t._v("既然两者各有优劣，那浏览器如何决定将资源放进内存还是硬盘呢？主要策略如下：")]),t._v(" "),r("ul",[r("li",[t._v("比较大的JS、CSS文件会直接被丢进磁盘，反之丢进内存；")]),t._v(" "),r("li",[t._v("内存使用率比较高的时候，文件优先进入磁盘")])])]),t._v(" "),r("li",[r("p",[t._v("Push Cache 即推送缓存，这是浏览器缓存的最后一道防线。它是 HTTP/2 中的内容，虽然现在应用的并不广泛，但随着 HTTP/2 的推广，它的应用越来越广泛；")])])]),t._v(" "),r("ol",{attrs:{start:"4"}},[r("li",[t._v("针对不同浏览器的缓存表现")])]),t._v(" "),r("ul",[r("li",[t._v("尽管浏览器在实现缓存的方式各有差别，但HTTP缓存RFC规范已经非常明确了；")]),t._v(" "),r("li",[t._v("在谷歌浏览器中，如果http报文里没有提供强缓存的字段，但是提供了 Last-Modified；谷歌浏览器会启用一个启发式算法，将资源按照强缓存的规则进行缓存，缓存的时间是：（Last-Modified - 报文生产时间）* 10%；")]),t._v(" "),r("li",[t._v("同时要明确一点，缓存是客户端和服务端一起完成的事，缺一不可；")])]),t._v(" "),r("h2",{attrs:{id:"chromium-渲染"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chromium-渲染"}},[t._v("#")]),t._v(" Chromium 渲染")]),t._v(" "),r("p",[t._v("我们首先来看一下渲染流水线的流程:")]),t._v(" "),r("p",[r("img",{attrs:{src:a(308),alt:"alt"}})]),t._v(" "),r("ol",[r("li",[t._v("回流，也叫重排；触发条件主要有以下：")])]),t._v(" "),r("ul",[r("li",[t._v("一个 DOM 元素的几何属性变化，常见的几何属性有width、height、padding、margin、left、top、border 等等, 这个很好理解。")]),t._v(" "),r("li",[t._v("使 DOM 节点发生增减或者移动。")]),t._v(" "),r("li",[t._v("读写 offset族、scroll族和client族属性的时候，浏览器为了获取这些值，需要进行回流操作。")]),t._v(" "),r("li",[t._v("调用 window.getComputedStyle 方法。")])]),t._v(" "),r("p",[t._v("依照上面的渲染流水线，触发回流的时候，如果 DOM 结构发生改变，则重新渲染 DOM 树，然后将后面的流程(包括主线程之外的任务)全部走一遍。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(361),alt:"alt"}})]),t._v(" "),r("p",[t._v("相当于将解析和合成的过程重新又走了一篇，开销是非常大的。")]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("当 DOM 的修改导致了样式的变化，并且没有影响几何属性的时候，会导致重绘(repaint)。")])]),t._v(" "),r("p",[t._v("由于没有导致 DOM 几何属性的变化，因此元素的位置信息不需要更新，从而省去布局的过程。流程如下：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(362),alt:"alt"}})]),t._v(" "),r("p",[t._v("跳过了生成布局树和建图层树的阶段，直接生成绘制列表，然后继续进行分块、生成位图等后面一系列操作。")]),t._v(" "),r("p",[t._v("可以看到，重绘不一定导致回流，但回流一定发生了重绘。")]),t._v(" "),r("h2",{attrs:{id:"本地存储"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本地存储"}},[t._v("#")]),t._v(" 本地存储")]),t._v(" "),r("ol",[r("li",[t._v("Cookie")])]),t._v(" "),r("ul",[r("li",[t._v("Cookie 是紧跟域名的。我们通过响应头里的 Set-Cookie 指定要存储的 Cookie 值。默认情况下，domain 被设置为设置 Cookie 页面的主机名，我们也可以手动设置 domain 的值：")])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("Set"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xiuyan"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" domain"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("xiuyan"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("me\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("ul",[r("li",[t._v("同一域名下的所有请求，都会携带cookie；大小为4KB；")])]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("Local Storage 和 Session Storage 的区别")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("生命周期：Local Storage 是持久化的本地存储，存储在其中的数据是永远不会过期的，使其消失的唯一办法是手动删除；而 Session Storage 是临时性的本地存储，它是会话级别的存储，当会话结束（页面被关闭）时，存储内容也随之被释放。")])]),t._v(" "),r("li",[r("p",[t._v("作用域：Local Storage、Session Storage 和 Cookie 都遵循同源策略。但 Session Storage 特别的一点在于，即便是相同域名下的两个页面，只要它们不在同一个浏览器窗口中打开，那么它们的 Session Storage 内容便无法共享。")])]),t._v(" "),r("li",[r("p",[t._v("存储容量大： Web Storage 根据浏览器的不同，存储容量可以达到 5-10M 之间。")])]),t._v(" "),r("li",[r("p",[t._v("仅位于浏览器端，不与服务端发生通信。")])])]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("IndexedDB")])]),t._v(" "),r("ul",[r("li",[t._v("是一个运行在浏览器上的非关系型数据库。既然是数据库了，那就不是 5M、10M 这样小打小闹级别了。理论上来说，IndexedDB 是没有存储上限的（一般来说不会小于 250M）。它不仅可以存储字符串，还可以存储二进制数据。")])]),t._v(" "),r("h2",{attrs:{id:"告别阻塞-css-与-js-的加载顺序优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#告别阻塞-css-与-js-的加载顺序优化"}},[t._v("#")]),t._v(" 告别阻塞：CSS 与 JS 的加载顺序优化")]),t._v(" "),r("h3",{attrs:{id:"css-的阻塞"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#css-的阻塞"}},[t._v("#")]),t._v(" CSS 的阻塞")]),t._v(" "),r("p",[t._v("在刚刚的过程中，我们提到 DOM 和 CSSOM 合力才能构建渲染树。这一点会给性能造成严重影响：默认情况下，CSS 是阻塞的资源。浏览器在构建 CSSOM 的过程中，不会渲染任何已处理的内容。即便 DOM 已经解析完毕了，只要 CSSOM 不 OK，那么渲染这个事情就不 OK（这主要是为了避免没有 CSS 的 HTML 页面丑陋地“裸奔”在用户眼前）。")]),t._v(" "),r("p",[t._v("我们知道，只有当我们开始解析 HTML 后、解析到 link 标签或者 style 标签时，CSS 才登场，CSSOM 的构建才开始。很多时候，DOM 不得不等待 CSSOM。因此我们可以这样总结：")]),t._v(" "),r("p",[r("strong",[t._v("CSS 是阻塞渲染的资源。需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。")])]),t._v(" "),r("p",[t._v("事实上，现在很多团队都已经做到了尽早（将 CSS 放在 head 标签里）和尽快（启用 CDN 实现静态资源加载速度的优化）。这个“把 CSS 往前放”的动作，对很多同学来说已经内化为一种编码习惯。那么现在我们还应该知道，这个“习惯”不是空穴来风，它是由 CSS 的特性决定的。")]),t._v(" "),r("h3",{attrs:{id:"js-的阻塞"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#js-的阻塞"}},[t._v("#")]),t._v(" JS 的阻塞")]),t._v(" "),r("p",[t._v("在首次渲染过程中，JS 并不是一个非登场不可的角色——没有 JS，CSSOM 和 DOM 照样可以组成渲染树，页面依然会呈现——即使它死气沉沉、毫无交互。")]),t._v(" "),r("p",[t._v("JS 的作用在于修改，它帮助我们修改网页的方方面面：内容、样式以及它如何响应用户交互。这“方方面面”的修改，本质上都是对 DOM 和 CSSDOM 进行修改。因此 JS 的执行会阻止 CSSOM，在我们不作显式声明的情况下，它也会阻塞 DOM。")]),t._v(" "),r("p",[t._v("我们知道，"),r("strong",[t._v("JS 引擎是独立于渲染引擎存在的")]),t._v("。我们的 JS 代码在文档的何处插入，就在何处执行。当 HTML 解析器遇到一个 script 标签时，它会暂停渲染过程，将控制权交给 JS 引擎。JS 引擎对内联的 JS 代码会直接执行，对外部 JS 文件还要先获取到脚本、再进行执行。等 JS 引擎运行完毕，浏览器又会把控制权还给渲染引擎，继续 CSSOM 和 DOM 的构建。 "),r("strong",[t._v("因此与其说是 JS 把 CSS 和 HTML 阻塞了，不如说是 JS 引擎抢走了渲染引擎的控制权。")])]),t._v(" "),r("p",[t._v("现在理解了阻塞的表现与原理，我们开始思考一个问题。浏览器之所以让 JS 阻塞其它的活动，是因为它不知道 JS 会做什么改变，担心如果不阻止后续的操作，会造成混乱。但是我们是写 JS 的人，我们知道 JS 会做什么改变。假如我们可以确认一个 JS 文件的执行时机并不一定非要是此时此刻，我们就可以通过对它使用 defer 和 async 来避免不必要的阻塞，这里我们就引出了外部 JS 的三种加载方式。")]),t._v(" "),r("ol",[r("li",[t._v("正常模式")])]),t._v(" "),r("ul",[r("li",[t._v("这种情况下 JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执行完毕才能去做其它事情。")])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script src"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("ol",{attrs:{start:"2"}},[r("li",[t._v("async 模式")])]),t._v(" "),r("ul",[r("li",[t._v("async 模式下，JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行。")])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" src"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("ol",{attrs:{start:"3"}},[r("li",[t._v("defer 模式")])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script defer src"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"index.js"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("defer 模式下，JS 的加载是异步的，执行是被推迟的。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。")]),t._v(" "),r("p",[t._v("从应用的角度来说，一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。")]),t._v(" "),r("p",[t._v("通过审时度势地向 script 标签添加 async/defer，我们就可以告诉浏览器在等待脚本可用期间不阻止其它的工作，这样可以显著提升性能。")]),t._v(" "),r("p",[t._v("所以一般我们会js放到body底部，加载是同步的加载，async和defer是异步的加载，至于async和defer的区别是加载执行的时机不同；")]),t._v(" "),r("p",[r("strong",[t._v("js 时间线步骤（创建 document 对象==>文档解析完==>文档解析完加载完执行完）")])]),t._v(" "),r("ol",[r("li",[r("p",[t._v("创建 Document 对象，开始解析 web 页面。解析 HTML 元素和他们的文本内容后添加 Element 对象和 Text 节点到文档中。这个阶段 document.readyState = 'loading'。")])]),t._v(" "),r("li",[r("p",[t._v("遇到 link 外部 css，创建线程，进行异步加载，并继续解析文档。")])]),t._v(" "),r("li",[r("p",[t._v("遇到 script 外部 js，并且没有设置 async、defer，浏览器同步加载，并阻塞，等待 js 加载完成并执行该脚本，然后继续解析文档。")])]),t._v(" "),r("li",[r("p",[t._v("遇到 script 外部 js，并且设置有 async、defer，浏览器创建线程异步加载，并继\n续解析文档。对于 async 属性的脚本，脚本加载完成后立即执行。（异步禁止使用 document.write()，\n因为当你整个文档解析到差不多，再调用 document.write()，会把之前所有的文档流都清空，用它里面的文档代替）")])]),t._v(" "),r("li",[r("p",[t._v("遇到 img 等（带有 src），先正常解析 dom 结构，然后浏览器异步加载 src，并继续解析文档。 看到标签直接生产 dom 树，不用等着 img 加载完 scr。")])]),t._v(" "),r("li",[r("p",[t._v("当文档解析完成（domTree 建立完毕，不是加载完毕），document.readyState = 'interactive'。")])]),t._v(" "),r("li",[r("p",[t._v("文档解析完成后，所有设置有 defer 的脚本会按照顺序执行。（注意与 async 的不同, 但同样禁止使用 document.write()）;")])]),t._v(" "),r("li",[r("p",[t._v("document 对象触发 DOMContentLoaded 事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段。")])]),t._v(" "),r("li",[r("p",[t._v("当所有 async 的脚本加载完成并执行后、img 等加载完成后（页面所有的都执行加载完之后）,document.readyState = 'complete'，window 对象触发 load 事件。")])]),t._v(" "),r("li",[r("p",[t._v("从此，以异步响应方式处理用户输入、网络事件等。")])])]),t._v(" "),r("h3",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。")])]),t._v(" "),r("li",[r("p",[t._v("CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。")])]),t._v(" "),r("li",[r("p",[t._v("通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个不带defer或async属性的script标签时，DOM构建将暂停，如果此时又恰巧浏览器尚未完成CSSOM的下载和构建，由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS，最后才重新DOM构建。")])])]),t._v(" "),r("h2",{attrs:{id:"dom-为什么这么慢"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dom-为什么这么慢"}},[t._v("#")]),t._v(" DOM 为什么这么慢？")]),t._v(" "),r("p",[t._v("JS 引擎和渲染引擎（浏览器内核）是独立实现的。当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了“跨界交流”。")]),t._v(" "),r("ol",[r("li",[t._v("利用innerHTML")]),t._v(" "),r("li",[t._v("利用DOM Fragment，document.createDocumentFragment() 方法")])]),t._v(" "),r("h2",{attrs:{id:"event-lop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#event-lop"}},[t._v("#")]),t._v(" event lop")]),t._v(" "),r("p",[t._v("总结一下，每一次循环都是一个这样的过程：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(363),alt:"alt"}})]),t._v(" "),r("h3",{attrs:{id:"渲染时机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#渲染时机"}},[t._v("#")]),t._v(" 渲染时机")]),t._v(" "),r("p",[t._v("我们更新 DOM 的时间点，应该尽可能靠近渲染的时机。"),r("strong",[t._v("当我们需要在异步任务中实现 DOM 修改时，把它包装成 micro 任务是相对明智的选择。")])]),t._v(" "),r("h2",{attrs:{id:"图片懒加载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图片懒加载"}},[t._v("#")]),t._v(" 图片懒加载")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取所有的图片标签")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" imgs "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'img'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取可视区域的高度")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" viewHeight "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHeight "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" document"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clientHeight\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// num用于统计当前显示到了哪一张图片，避免每次都从第一张图片开始检查是否露出")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("lazyload")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" imgs"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用可视区域高度减去元素顶部距离可视区域顶部的高度")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" distance "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" viewHeight "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" imgs"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBoundingClientRect")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top\n        "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果可视区域高度大于等于元素顶部距离可视区域顶部的高度，说明元素露出")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("distance "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给元素写入真实的src，展示图片")]),t._v("\n            imgs"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" imgs"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data-src'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 前i张图片已经加载完毕，下次从第i+1张开始检查是否露出")]),t._v("\n            num "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听Scroll事件，")]),t._v("\nwindow"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scroll'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lazyload"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br"),r("span",{staticClass:"line-number"},[t._v("19")]),r("br"),r("span",{staticClass:"line-number"},[t._v("20")]),r("br"),r("span",{staticClass:"line-number"},[t._v("21")]),r("br")])]),r("h2",{attrs:{id:"浏览器安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器安全"}},[t._v("#")]),t._v(" 浏览器安全")]),t._v(" "),r("h3",{attrs:{id:"xss-攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xss-攻击"}},[t._v("#")]),t._v(" XSS 攻击")]),t._v(" "),r("p",[t._v("XSS 全称是 Cross Site Scripting(即跨站脚本)，为了和 CSS 区分，故叫它XSS。XSS 攻击是指浏览器中执行恶意脚本(无论是跨域还是同域)，从而拿到用户的信息并进行操作。")]),t._v(" "),r("p",[t._v("这些操作一般可以完成下面这些事情:")]),t._v(" "),r("ul",[r("li",[t._v("窃取Cookie。")]),t._v(" "),r("li",[t._v("监听用户行为，比如输入账号密码后直接发送到黑客服务器。")]),t._v(" "),r("li",[t._v("修改 DOM 伪造登录表单。")]),t._v(" "),r("li",[t._v("在页面中生成浮窗广告。")])]),t._v(" "),r("p",[t._v("通常情况，XSS 攻击的实现有三种方式——存储型、反射型和文档型。原理都比较简单，先来一一介绍一下。")]),t._v(" "),r("h3",{attrs:{id:"存储型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#存储型"}},[t._v("#")]),t._v(" 存储型")]),t._v(" "),r("p",[t._v("存储型，顾名思义就是将恶意脚本存储了起来，确实，存储型的 XSS 将脚本存储到了服务端的数据库，然后在客户端执行这些脚本，从而达到攻击的效果。")]),t._v(" "),r("p",[t._v("常见的场景是留言评论区提交一段脚本代码，如果前后端没有做好转义的工作，那评论内容存到了数据库，在页面渲染过程中直接执行, 相当于执行一段未知逻辑的 JS 代码，是非常恐怖的。这就是存储型的 XSS 攻击。")]),t._v(" "),r("p",[t._v("2015 年喜马拉雅就出现过这样的事情；")]),t._v(" "),r("h3",{attrs:{id:"反射型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#反射型"}},[t._v("#")]),t._v(" 反射型")]),t._v(" "),r("p",[t._v("反射型XSS指的是恶意脚本作为网络请求的一部分。")]),t._v(" "),r("p",[t._v("比如我输入:")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("http"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("sanyuan"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("q"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你完蛋了"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("这样，在服务器端会拿到q参数,然后将内容返回给浏览器端，浏览器将这些内容作为HTML的一部分解析，发现是一个脚本，直接执行，这样就被攻击了。")]),t._v(" "),r("p",[t._v("之所以叫它反射型, 是因为恶意脚本是通过作为网络请求的参数，经过服务器，然后再反射到HTML文档中，执行解析。和存储型不一样的是，服务器并不会存储这些恶意脚本。")]),t._v(" "),r("h3",{attrs:{id:"文档型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文档型"}},[t._v("#")]),t._v(" 文档型")]),t._v(" "),r("p",[t._v("文档型的 XSS 攻击并不会经过服务端，而是作为中间人的角色，在数据传输过程劫持到网络数据包，然后修改里面的 html 文档！")]),t._v(" "),r("p",[t._v("这样的劫持方式包括"),r("code",[t._v("WIFI路由器劫持")]),t._v("或者"),r("code",[t._v("本地恶意软件")]),t._v("等。")]),t._v(" "),r("h3",{attrs:{id:"防范措施"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防范措施"}},[t._v("#")]),t._v(" 防范措施")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("无论是在前端和服务端，都要对用户的输入进行转码或者过滤。")])]),t._v(" "),r("li",[r("p",[t._v("利用CSP，即浏览器中的内容安全策略，它的核心思想就是服务器决定浏览器加载哪些资源，具体来说可以完成以下功能:")])])]),t._v(" "),r("ul",[r("li",[t._v("限制其他域下的资源加载。")]),t._v(" "),r("li",[t._v("禁止向其它域提交数据。")]),t._v(" "),r("li",[t._v("提供上报机制，能帮助我们及时发现 XSS 攻击。")])]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("利用 HttpOnly，很多 XSS 攻击脚本都是用来窃取Cookie, 而设置 Cookie 的 HttpOnly 属性后，JavaScript 便无法读取 Cookie 的值。这样也能很好的防范 XSS 攻击。")])]),t._v(" "),r("h3",{attrs:{id:"总结-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("XSS 攻击是指浏览器中执行恶意脚本, 然后拿到用户的信息进行操作。主要分为存储型、反射型和文档型。防范的措施包括:")]),t._v(" "),r("ul",[r("li",[t._v("一个信念: 不要相信用户的输入，对输入内容转码或者过滤，让其不可执行。")]),t._v(" "),r("li",[t._v("两个利用: 利用 CSP，利用 Cookie 的 HttpOnly 属性。")])]),t._v(" "),r("h3",{attrs:{id:"什么是csrf攻击"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是csrf攻击"}},[t._v("#")]),t._v(" 什么是CSRF攻击？")]),t._v(" "),r("p",[t._v("CSRF(Cross-site request forgery), 即跨站请求伪造，指的是黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户目前的登录状态发起跨站请求。")]),t._v(" "),r("p",[t._v("举个例子, 你在某个论坛点击了黑客精心挑选的小姐姐图片，你点击后，进入了一个新的页面。")]),t._v(" "),r("p",[t._v("那么恭喜你，被攻击了。")]),t._v(" "),r("p",[t._v("你可能会比较好奇，怎么突然就被攻击了呢？接下来我们就来拆解一下当你点击了链接之后，黑客在背后做了哪些事情。")]),t._v(" "),r("p",[t._v("可能会做三样事情。列举如下：")]),t._v(" "),r("ol",[r("li",[t._v("自动发 GET 请求")])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 黑客网页里面可能有一段这样的代码:")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("img src"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://xxx.com/info?user=hhh&count=100"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("img"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])]),r("p",[t._v("进入页面后自动发送 get 请求，值得注意的是，这个请求会自动带上关于 xxx.com 的 cookie 信息(这里是假定你已经在 xxx.com 中登录过)。")]),t._v(" "),r("p",[t._v("假如服务器端没有相应的验证机制，它可能认为发请求的是一个正常的用户，因为携带了相应的 cookie，然后进行相应的各种操作，可以是转账汇款以及其他的恶意操作。")]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("自动发 POST 请求\n黑客可能自己填了一个表单，写了一段自动提交的脚本。")])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("form id"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hacker-form'")]),t._v(" action"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://xxx.com/info"')]),t._v(" method"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"POST"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hidden"')]),t._v(" name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"user"')]),t._v(" value"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hhh"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input type"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hidden"')]),t._v(" name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"count"')]),t._v(" value"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("form"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("document"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hacker-form'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])]),r("p",[t._v("同样也会携带相应的用户 cookie 信息，让服务器误以为是一个正常的用户在操作，让各种恶意的操作变为可能。")]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("诱导点击发送 GET 请求\n在黑客的网站上，可能会放上一个链接，驱使你来点击:")])]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("a href"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://xxx/info?user=hhh&count=100"')]),t._v(" taget"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"_blank"')]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("点击进入修仙世界"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("点击后，自动发送 get 请求，接下来和自动发 GET 请求部分同理。")]),t._v(" "),r("p",[t._v("这就是CSRF攻击的原理。和XSS攻击对比，CSRF 攻击并不需要将恶意代码注入用户当前页面的html文档中，而是跳转到新的页面，利用服务器的验证漏洞和用户之前的登录状态来模拟用户进行操作。")]),t._v(" "),r("h3",{attrs:{id:"防范措施-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防范措施-2"}},[t._v("#")]),t._v(" 防范措施")]),t._v(" "),r("ol",[r("li",[t._v("利用Cookie的SameSite属性")])]),t._v(" "),r("p",[t._v("CSRF攻击中重要的一环就是自动发送目标站点下的 Cookie,然后就是这一份 Cookie 模拟了用户的身份。因此在Cookie上面下文章是防范的不二之选。")]),t._v(" "),r("p",[t._v("恰好，在 Cookie 当中有一个关键的字段，可以对请求中 Cookie 的携带作一些限制，这个字段就是SameSite。")]),t._v(" "),r("p",[t._v("SameSite可以设置为三个值，Strict、Lax和None。")]),t._v(" "),r("p",[t._v("a. 在Strict模式下，浏览器完全禁止第三方请求携带Cookie。比如请求sanyuan.com网站只能在sanyuan.com域名当中请求才能携带 Cookie，在其他网站请求都不能。")]),t._v(" "),r("p",[t._v("b. 在Lax模式，就宽松一点了，但是只能在 get 方法提交表单况或者a 标签发送 get 请求的情况下可以携带 Cookie，其他情况均不能。")]),t._v(" "),r("p",[t._v("c. 在None模式下，也就是默认模式，请求会自动携带上 Cookie。")]),t._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[t._v("验证来源站点")])]),t._v(" "),r("p",[t._v("这就需要要用到请求头中的两个字段: Origin和Referer。")]),t._v(" "),r("p",[t._v("其中，Origin只包含域名信息，而Referer包含了具体的 URL 路径。")]),t._v(" "),r("p",[t._v("当然，这两者都是可以伪造的，通过 Ajax 中自定义请求头即可，安全性略差。")]),t._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[t._v("CSRF Token")])]),t._v(" "),r("p",[t._v("首先，浏览器向服务器发送请求时，服务器生成一个字符串，将其植入到返回的页面中。")]),t._v(" "),r("p",[t._v("然后浏览器如果要发送请求，就必须带上这个字符串，然后服务器来验证是否合法，如果不合法则不予响应。这个字符串也就是CSRF Token，通常第三方站点无法拿到这个 token, 因此也就是被服务器给拒绝。")]),t._v(" "),r("h3",{attrs:{id:"总结-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("CSRF(Cross-site request forgery), 即跨站请求伪造，指的是黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户目前的登录状态发起跨站请求。")]),t._v(" "),r("p",[t._v("CSRF攻击一般会有三种方式:")]),t._v(" "),r("ul",[r("li",[t._v("自动 GET 请求")]),t._v(" "),r("li",[t._v("自动 POST 请求")]),t._v(" "),r("li",[t._v("诱导点击发送 GET 请求。")])]),t._v(" "),r("p",[t._v("防范措施: 利用 Cookie 的 SameSite 属性、验证来源站点和CSRF Token。")]),t._v(" "),r("h2",{attrs:{id:"对称加密和非对称加密的结合"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对称加密和非对称加密的结合"}},[t._v("#")]),t._v(" 对称加密和非对称加密的结合")]),t._v(" "),r("p",[t._v("可以发现，对称加密和非对称加密，只用前者会有安全隐患，只用后者性能消耗又太大。那我们能不能把两者结合，保证性能的同时又能保证安全呢？")]),t._v(" "),r("p",[t._v("其实是可以的，演示一下整个流程：")]),t._v(" "),r("ol",[r("li",[t._v("浏览器向服务器发送client_random和加密方法列表。")]),t._v(" "),r("li",[t._v("服务器接收到，返回server_random、加密方法以及公钥。")]),t._v(" "),r("li",[t._v("浏览器接收，接着生成另一个随机数pre_random, 并且用公钥加密，传给服务器。(敲黑板！重点操作！)")]),t._v(" "),r("li",[t._v("服务器用私钥解密这个被加密后的pre_random。")])]),t._v(" "),r("p",[t._v("现在浏览器和服务器有三样相同的凭证:client_random、server_random和pre_random。然后两者用相同的加密方法混合这三个随机数，生成最终的"),r("code",[t._v("密钥")]),t._v("。")]),t._v(" "),r("p",[t._v("然后浏览器和服务器尽管用一样的密钥进行通信，即使用"),r("code",[t._v("对称加密")]),t._v("。")]),t._v(" "),r("p",[t._v("这个最终的密钥是很难被中间人拿到的，为什么呢? 因为中间人没有私钥，从而拿不到pre_random，也就无法生成最终的密钥了。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(364),alt:"alt"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);